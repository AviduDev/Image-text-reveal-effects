<section>
    <h2>Image Slider(vanillaJS)</h2>
  <div class="slider">
    <!-- --------------------Wrapper----------------- -->
    <div class="slider-wrapper">
      <div class="slider-item">
        <figure>
          <img
            src="https://res.cloudinary.com/avidu/image/upload/v1684743071/Product%20Images/work-138094134-classic-t-shirt_1_ua83zf.jpg"
            alt=""
          />
        </figure>
      </div>
      <div class="slider-item">
        <figure>
          <img
            src="https://res.cloudinary.com/avidu/image/upload/v1684743070/Product%20Images/work-138046459-classic-t-shirt_c80wx9.jpg"
            alt=""
          />
        </figure>
      </div>
      <div class="slider-item">
        <figure>
          <img
            src="https://res.cloudinary.com/avidu/image/upload/v1684743070/Product%20Images/work-137804906-classic-t-shirt_teegnu.jpg"
            alt=""
          />
        </figure>
      </div>
      <div class="slider-item">
        <figure>
          <img
            src="https://res.cloudinary.com/avidu/image/upload/v1684743068/Product%20Images/work-114365061-classic-t-shirt_elw73v.jpg"
            alt=""
          />
        </figure>
      </div>
      <div class="slider-item">
        <figure>
          <img
            src="https://res.cloudinary.com/avidu/image/upload/v1684743068/Product%20Images/work-116028155-classic-t-shirt_m6quiw.jpg"
            alt=""
          />
        </figure>
      </div>
    </div>
    <!-- ---------------------Slider Progress----------------- -->
    <div class="slider-progress">
      <div class="slider-progress-bar"></div>
    </div>
  </div>
</section>


<style>
    .slider {
        width: 100%;
        cursor: grab;
        position: relative;
    }

    .slider-wrapper {
        white-space: nowrap;
    }

    .slider-item {
        display: inline-block;
        width: 40vw;
        padding: 3vw;
    }

    .slider-item figure {
        position: relative;
        padding-bottom: 50%;
        overflow: hidden;
    }

    .slider-item figure img {
        position: absolute;
        width: 100%;
        object-fit: cover;
    }

    .slider-progress {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 20vw;
        height: 2px;
        margin: 2em;
        background-color: #0a0a0a;
    }

    .slider-progress-bar {
        position: absolute;
        width: 100%;
        height: 100%;
        background-color: antiquewhite;
        transform: scaleX(0);
        transform-origin: 0 0;
    }
</style>

<script>
    const lerp = (f0, f1, t) => (1 - t) * f0 + t * f1;
    const clamp = (val, min, max) => Math.max(min, Math.min(val, max));

    class DragScroll {
[x: string]: any;
        constructor(obj) {
            this.el = document.querySelector(obj.el);
            this.wrap = document.querySelector(obj.wrap);
            this.items = document.querySelectorAll(obj.item);
            this.bar = document.querySelector(obj.bar);
            this.init();
        }

        init() {
            this.progress = 0;
            this.speed = 0;
            this.oldX = 0;
            this.x = 0;
            this.playrate = 0;

            this.bindings();
            this.events();
            this.calculate();
            this.raf();
        }

        bindings() {
            [
                "events",
                "calculate",
                "raf",
                "handleWheel",
                "move",
                "handleTouchStart",
                "handleTouchMove",
                "handleTouchEnd",
            ].forEach((method) => {
                this[method] = this[method].bind(this);
            });
        }

        calculate() {
            this.progress = 0;
            (this.wrapWidth = this.items[0].clientWidth * this),
            items.length;
            this.wrap.style.width = `${this.wrapWidth}px`;
            this.maxScroll = this.wrapWidth - this.el.clientWidth;
        }

        handleWheel(e) {
            this.progress += e.deltaY;
            this.move();
        }

        handleTouchStart(e) {
            e.preventDefault();
            this.dragging = true;
            this.startX = e.clientX || e.touches[0].clientX;
        }

        handleTouchMove(e) {
            if(!this.draggin) return false;
            const x = e.clientX || e.touches[0].clientX;
            this.progress += (this.startX - x) * 2.5;
            this.startX = x;
            this.move();
        }

        handleTouchEnd() {
            this.dragging = false;
        }

        move() {
            this.progress = clamp(this.progress, 0, this.maxScroll);
        }

        events() {
            window.addEventListener("resize", this.calculate);
            window.addEventListener("wheel", this.handleWheel);

            this.el.addEventListener("touchstart", this.handleTouchStart);
            window.addEventListener("touchmove", this.handleTouchMove);
            window.addEventListener("touchend", this.handleTouchEnd);

            window.addEventListener("mousedown", this.handleTouchStart);
            window.addEventListener("mousemove", this.handleTouchMove);
            window.addEventListener("mouseup", this.handleTouchEnd);
            document.body.addEventListener("mouseleave", this.handleTouchEnd);
        }

        raf() {
            this.x = lerp(this.x, this.progress, 0.1);
            this.playrate = this.x / this.maxScroll;

            this.wrap.style.transform = `translatex(${-this.x}px)`;
            this.bar.style.transform = `scaleX(${0.18 + this.playrate * 0.82})`;

            this.speed = Math.min(100, this.oldX - this.x);
            this.oldX = this.x;

            this.scale = lerp(this.scale, this.speed, 0.1);
            this.items.forEach((item) => {
                item.style.transform = `scale(${1 - Math.abs(this.speed) * 0.005})`;
                item.querySelector("img").style.transform = `scaleX
                (${
                    1 + Math.abs(this.speed) * 0.004
                })`;
            });
        }
    }

    const scroll = new DragScroll({
        el: ".slider",
        wrap: ".slider-wrapper",
        item: ".slider-item",
        bar: ".slider-progress-bar",
    });

    const animateScroll = () => {
        requestAnimationFrame(animateScroll);
        scroll.raf();
    }

    animateScroll();
</script>