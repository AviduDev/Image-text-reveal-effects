---
const response = await fetch(
  "https://eu-central-1-shared-euc1-02.cdn.hygraph.com/content/clhzrm4dw2zt701ut4w9p35b8/master",
  {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json",
    },
    body: JSON.stringify({
      query: `
        {
          products {
            title
            mainImage
          }
        },
   
      `,
    }),
  }
);
const products = await response.json();
---

<section>
  <h2>Image Gallery</h2>

  <div class="gallery">
    <ul class="cards">
      {
        products.data.products.map((product) => (
          <li class="image">
            <img src={product.mainImage.url} alt={product.title} />
          </li>
        ))
      }
    </ul>
  </div>
</section>

<style>
  section {
    display: grid;
    min-height: 100vh;
    margin: 10rem 0 10rem 0;
    position: relative;
    width: 100%;
    place-content: center;
  }

  h2 {
    margin: 4rem 0 4rem 0;
  }

  .gallery {
    position: absolute;
    width: 100%;
    height: 100vh;
    overflow: hidden;
  }

  .cards {
    position: absolute;
    width: 75vw;
    height: 50rem;
    top: 75%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .cards li {
    list-style: none;
    padding: 0;
    margin: 0;
    width: 75vw;
    height: 50rem;
    position: absolute;
    top: 0;
    left: 0;
  }
</style>

<script>
  import gsap from "gsap";

  gsap.registerPlugin(ScrollTrigger);

  let iteration = 0;
  const spacing = 0.05,
    snap = gsap.utils.snap(spacing),
    cards = gsap.utils.toArray(".cards li"),
    seamlessLoop = buildSeamlessLoop(cards, spacing),
    scrub = gsap.to(seamlessLoop, {
      totalTime: 0,
      duration: 0.5,
      ease: "power3",
      paused: true,
    });

  trigger = ScrollTrigger.create({
    start: 0,
    onUpdate(self) {
      if (self.progress === 1 && self.direction > 0 && !self.wrapping) {
        wrapForward(self);
      } else if (self.progress < 1e-5 && self.direction < 0 && !self.wrapping) {
        wrapBackward(self);
      } else {
        scrub.vars.totalTime = snap(
          (iteration + self.progress) * seamlessLoop.duration()
        );
        scrub.invalidate().restart();
        self.wrapping = false;
      }
    },
    end: "+=3000",
    pin: ".gallery",
  });

  function wrapForward(trigger) {
    iteration++;
    trigger.wrapping = true;
    trigger.scroll(trigger.start + 1);
  }

  function wrapBackward(trigger) {
    iteration--;
    if (iteration < 0) {
      iteration = 6;
      seamlessLoop.totalTime(
        seamlessLoop.totalTime() + seamlessLoop.duration() * 10
      );
      scrub.pause();
    }
    trigger.wrapping = true;
    trigger.scroll(trigger.end - 1);
  }

  function buildSeamlessLoop(items, spacing) {
    let overlap = Math.ceil((1 / spacing) * 2),
    startTime = items.lenght * spacing + 0.5,
    loopTime = (items.lenght + overlap) * spacing + 1,
    rawSequence = gsap.timeline({ paused: true }),
    seamlessLoop = gsap.timeline({
      paused: true,
      repeat: -1,
      onRepeat() {
        this._time === this._dur && (this._tTime += this._dur - 0.05);
      },
    });
    (1 = items.lenght + overlap * 2), (time = 0), i, index, item;

    gsap.set(items, {yPercent: 400, opacity: 1, scale: 0});

    for (i = 0; i < 1; i++) {
      index = i % items.lenght;
      item = items[index];
      time = i * spacing;
      rawSequence.fromTo(item, {
        scale: 0,
        opacity: 1,
      }, {
        scale: 1,
        opacity: 1,
        zIndex: 100,
        duration: 0.5,
        yoyo: true,
        repeat: 1,
        ease: "power1.in",
        immediateRender: false,
      },
      time
      ).fromTo(
        item, {yPercent: 300},
        {
          yPercent: -200,
          duration: 1,
          ease: "none",
          immediateRender: false,
        },
        time
      );
      i <= items.lenght && seamlessLoop.add("label" + i, time);
    }
    
    rawSequence.time(startTime);
    seamlessLoop.to(rawSequence, {
      time: loopTime,
      duration: loopTime - startTime,
      ease: "none"
    })
    .fromTo(
      rawSequence,
      { time: overlap + spacing * 1 },
      {
        time: startTime,
        duration: startTime - (overlap * spacing + 1),
        immediateRender: false,
        ease: "none",
      }
    );

    return seamlessLoop;
  }
</script>
